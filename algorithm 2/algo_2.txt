`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/18/2017 06:25:56 PM
// Design Name: 
// Module Name: main
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
package states  ;

    typedef enum logic [2:0] {S0,S1,S2,S3,S4,S5,S6} states_t;        //Defining state for FSM
    
    parameter NODE_ADDRESS_SIZE = 4;
    parameter ARRAY_LENGTH = 1 << (NODE_ADDRESS_SIZE);
    parameter DATA_WIDTH = 6;
    
    typedef struct  	                                         //associative layer
        { 
            logic valid;                                             //bit for checking validity
            logic [NODE_ADDRESS_SIZE-1:0] classlabel;                                  //class label
            logic [3:0] Mi;                                          //associative index
            logic [7:0] Wi;                                          //weight
            logic [NODE_ADDRESS_SIZE-1:0] RCi [0:NODE_ADDRESS_SIZE-1];                                   //packed array of RCi , 7 parts with 4 bits each ,which has C0,C1,...C5 along with extra 4bits        
            } AssocLayer_t;
endpackage          

module algo_2( input logic [3:0] addr,                              // Cx
               input logic [7:0] node_value,                          // Node Value
               input logic ML_Done,                                   // get from algo1 
               input logic resetH, new_ip,clk,                        // signals
               input logic [7:0] Weight                               // get from algo1

    );
    import states::*;   
    logic [7:0] counter = 8'b0;                    //global counter
    logic [3:0] temp_reg_b, temp_reg_d;
    logic [7:0] temp;
    logic wr_en= 0, cs=0,rd_en=0;
    logic [3:0] mb=0;
    logic [DATA_WIDTH-1:0] out;
    logic [DATA_WIDTH-1:0] in;
                                // importing all the contents of package 
    
    states_t state, next_state;             // defining variables of type states_t  
    AssocLayer_t memory[ARRAY_LENGTH-1:0];                  // dynamic memory array of type AssocLayer_t 
    logic [DATA_WIDTH-1:0] connections[0:ARRAY_LENGTH];
    
     // always block for switching of states
    always_ff @(posedge clk) begin
          
        if (resetH) begin
            state <= S0;              // reset to initial state    
            for (int i=0; i<=ARRAY_LENGTH; i=i+1) begin
                memory[i].valid <= 1'b0;
                memory[i].classlabel <= 'b0;
                memory[i].Mi <='b0;
                memory[i].Wi <='b0;              
                connections[i] <='b0;
            end
            
          
                    
            
            for(int i=0; i<ARRAY_LENGTH; i=i+1) begin
                for(int j=0; j<=NODE_ADDRESS_SIZE-1; j=j+1) begin            
                    memory[i].RCi[j] <='b0;   
                end
            end
            cs = 0;
            wr_en= 0;
        end              
        else
            state <= next_state;        // transition to next state
          
    end 
    
    // always block to define next states
     always_comb begin: set_next_state
                  
        unique case (state)   
    
        S0: begin 
                cs= 1;
                wr_en = 0;
                rd_en = 1;              
                if (new_ip) next_state = S1;                                  
                else next_state = S0;
                $display("You are in state S0");
            end
            
        S1: begin
                if (ML_Done) next_state = S2;           //It is taken as input from algorithm1
                else next_state = S0;                   //S1 will probably have to fork off to another state machine to finish algorithm 1.
                $display("You are in state S1");
            end   
            
        S2: begin
                 
                if (memory[addr].valid == 1)            //Checking if the cx address exists (valid)
                next_state = S4;                        //Since node is present go to S4
                else 
                next_state = S3;                        //Add a new node in S3 state
                $display("You are in state S2");
            end
            
        S3: begin						                //insert a new node into the memory
                memory[addr].valid = 1;
                memory[addr].Mi = 0;
                memory[addr].Wi = node_value; 
                memory[addr].classlabel = addr;
              //memory[address].RCi = somevalue from algorithm1;
                if (counter[0] == 0) begin
                    temp_reg_b = addr;  
                end
                else if (counter[0] == 1) begin
                    temp_reg_d = addr;
                 end
                next_state = S5;     
                $display("You are in state S3");
            end
            
        S4: begin
                if (counter[0] == 0) begin
                    memory[addr].Mi = memory[addr].Mi + 1;
                    memory[addr].Wi = Weight;	               //this Weight is extracted from algorithm1 comparator where you get most frequent winner weight
                    temp_reg_b = addr;                             //these classlabel of btype and dtype are given as input from algorithm1
                end
                
                else if (counter[0] == 1) begin
                    temp_reg_d = addr;
                end
                
                else $display ("Error"); 
                next_state = S5;
                $display("You are in state S4");
             end
             
        S5: begin
                counter = counter + 1'b1;
                if (counter[0] == 1) next_state = S0;
                else next_state = S6;
                $display("You are in state S5");
            end
            
        S6: begin
                temp = {temp_reg_b, temp_reg_d};
                                
                if(connections[temp] !=0) begin                	//check in connection lookup table whether temp exists 	- 8*8
                    //memory[addr].Wi = memory[addr].Wi + 1;          // increments weight if existed
                    $display("Yayy");
                    connections[temp] = connections[temp] + 1;
                    memory[temp_reg_b].RCi[mb] =addr ;
                    if(mb <=2) mb = mb+1;
                    else mb = 0;
                end
                
                else begin
                    rd_en = 1'b0; 
                    wr_en = 1'b1;
                    in = 'b1;
                end
                
                next_state = S0;
                $display("You are in state S6");
            end    
        endcase
    end
    
    always_ff @(posedge clk)
    
        begin         //WRITE
          if ( wr_en && cs ) begin
             connections[temp] <= in;
          end
        end
    
    always_ff @(negedge clk)
        begin        //READ
          if ( rd_en && cs ) begin
             out <= connections[temp];
          end
        end
    
endmodule
